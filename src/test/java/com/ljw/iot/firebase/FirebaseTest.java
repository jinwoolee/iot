package com.ljw.iot.firebase;

import static org.junit.Assert.assertNotNull;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import javax.annotation.Resource;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.CollectionReference;
import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import com.google.cloud.firestore.WriteResult;
import com.ljw.common.config.AppConfigTest;
import com.ljw.iot.config.FirebaseConfig;
import com.ljw.iot.config.IotConfigTest;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes={FirebaseConfig.class})
public class FirebaseTest {

    private static final Logger logger = LoggerFactory.getLogger(FirebaseTest.class);
    
    @Resource(name="firestore")
    private Firestore db;

    @Test
    public void firestoreBeanTest() {
	assertNotNull(db);
    }
    
    // read firebase test
    @Test
    public void readDataFirebaseTest() throws IOException, InterruptedException, ExecutionException {

	ApiFuture<QuerySnapshot> query = db.collection("dustMeasure").get();
	QuerySnapshot querySnapshot = query.get();

	List<QueryDocumentSnapshot> documents = querySnapshot.getDocuments();
	for (QueryDocumentSnapshot document : documents) {

	    logger.debug("document.getId() : {} ", document.getId());
	    logger.debug("aqi : {} ", document.getLong("aqi"));
	    logger.debug("measure : {} ", document.getLong("measure"));
	    logger.debug("measure_id : {} ", document.getLong("measure_id"));
	    logger.debug("measure_id : {} ", document.getDate("reg_dt"));

	    // timestamp 추후 적
	    // logger.debug("reg_dt : {} ", document.getTimestamp("reg_dt"));
	    // logger.debug("reg_dt : {} ", document.getDate("reg_dt"));
	}
    }

    // firebase data 추가
    @Test
    public void addDatFirebaseTest() throws InterruptedException, ExecutionException, IOException {
	DocumentReference docRef = db.collection("dustMeasure").document("dustMeasure");

	Map<String, Object> data = new HashMap<>();
	data.put("aqi", 13.4);
	data.put("measure", 2459.7);
	data.put("sensor_id", 1);
	data.put("reg_dt", new Date(System.currentTimeMillis()));

	// timestamp 추후 적
	// data.put("reg_dt", ServerValue.TIMESTAMP);

	// asynchronously write data
	ApiFuture<WriteResult> result = docRef.set(data);

	logger.debug("Update time : {}", result.get().getUpdateTime());
    }

    // firebase data 추가 - document auto generate
    @Test
    public void autoGenerateDocumentTest() throws InterruptedException, ExecutionException, IOException {
	CollectionReference collRef = db.collection("dustMeasure");

	Map<String, Object> data = new HashMap<>();
	data.put("aqi", 13.4);
	data.put("measure", 2459.7);
	data.put("sensor_id", 1);
	data.put("reg_dt", new Date(System.currentTimeMillis()));

	// timestamp 추후 적
	// data.put("reg_dt", ServerValue.TIMESTAMP);

	// asynchronously write data
	ApiFuture<DocumentReference> result = collRef.add(data);

	logger.debug("Update time : {}", result.get().getId());
    }

}
